(ns mtz-cms.routes.main
  "Main routing for Mount Zion CMS"
  (:require
   [hiccup.core :as hiccup]
   [mtz-cms.pathom.resolvers :as pathom]
   [mtz-cms.alfresco.client :as alfresco]
   [mtz-cms.ui.pages :as pages]
   [mtz-cms.ui.base :as base]
   [mtz-cms.components.templates :as components]
   [mtz-cms.components.htmx :as htmx]
   [mtz-cms.components.blog :as blog]
   [mtz-cms.components.sunday-worship :as worship]
   [mtz-cms.routes.api :as api]
   [mtz-cms.validation.dashboard :as dashboard]
   [mtz-cms.admin.style-guide :as style-guide]
   [mtz-cms.cache.simple :as cache]
   [mtz-cms.content.static-loader :as static]
   [clj-http.client]
   [clojure.tools.logging :as log]))

;; --- HANDLER HELPERS ---

(defn html-response [hiccup-content]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body (hiccup/html hiccup-content)})

(defn json-response [data]
  {:status 200
   :headers {"Content-Type" "application/json"}
   :body (pr-str data)})

;; --- ROUTE HANDLERS ---

(defn home-handler [request]
  "Home page with HTMX dynamic components"
  (let [ctx {}  ; Alfresco client uses default-config
        page-config (htmx/get-page-component-config :home ctx)]
    (html-response
     (pages/base-layout
      "Mount Zion UCC - Home"
      (htmx/htmx-hero-features-layout page-config)
      ctx))))

(defn about-handler [request]
  (let [ctx {}
        result (pathom/query ctx [{[:page/key :about] [:page/title :page/content]}])
        page-data (get result [:page/key :about])]
    (html-response (pages/about-page page-data ctx))))

(defn contact-handler [request]
  (let [ctx {}]
    (html-response (pages/contact-page ctx))))

(defn events-handler [request]
  (let [ctx {}]
    (html-response (pages/events-page ctx))))

(defn calendar-handler [request]
  (let [ctx {}]
    (html-response (pages/calendar-page ctx))))

(defn demo-handler [request]
  (let [ctx {}
        ;; Test Pathom
        greeting-result (pathom/query ctx [{[:test/name "Mount Zion CMS"] [:test/greeting]}])
        greeting (get-in greeting-result [[:test/name "Mount Zion CMS"] :test/greeting])

        ;; Test Alfresco
        alfresco-result (alfresco/test-connection ctx)]

    (html-response (pages/demo-page {:greeting greeting
                                     :alfresco alfresco-result} ctx))))

(defn dynamic-page-handler [request]
  "Handle any page - checks static-first, then falls back to Alfresco

   Static pages (generated by sync-content.clj):
   - Fast load (no Alfresco call)
   - Served from resources/content/static/
   - Indicated by web:generateStatic=true in Alfresco

   Dynamic pages (live from Alfresco):
   - Real-time content
   - Cached for performance
   - Fetched via Pathom"
  (let [slug (get-in request [:path-params :slug])
        ctx {}]

    (log/debug "Page request for slug:" slug)

    ;; Try static first
    (if-let [static-content (static/load-static-page slug)]
      (do
        (log/info "üìÑ Serving STATIC page:" slug)
        (html-response (pages/dynamic-page
                       {:page/title (:title static-content)
                        :page/content (:content static-content)
                        :page/node-id (:node-id static-content)
                        :page/exists true
                        :page/static true} ctx)))

      ;; Fall back to dynamic (Alfresco)
      (let [result (pathom/query ctx [{[:page/slug slug] [:page/title :page/content :page/exists]}])
            page-data (get result [:page/slug slug])]

        (if (:page/exists page-data)
          (do
            (log/info "üîÑ Serving DYNAMIC page:" slug)
            (html-response (pages/dynamic-page page-data ctx)))

          ;; Not found
          (do
            (log/warn "404 - Page not found:" slug)
            {:status 404
             :headers {"Content-Type" "text/html"}
             :body (hiccup/html (pages/not-found-page slug))}))))))

(defn pages-list-handler [request]
  "List all discovered pages"
  (let [ctx {}
        result (pathom/query ctx [:site/pages :site/navigation])
        pages (:site/pages result)
        navigation (:site/navigation result)]
    (html-response (pages/pages-list-page {:pages pages :navigation navigation}))))

(defn image-proxy-handler [request]
  "Proxy images from Alfresco by node ID with caching"
  (let [ctx {}
        node-id (get-in request [:path-params :node-id])]
    (log/debug "Proxying image for node:" node-id)
    (try
      ;; First check if it's a PDF
      (let [node-info (alfresco/get-node ctx node-id)
            mime-type (get-in node-info [:data :entry :content :mimeType])
            is-pdf? (= mime-type "application/pdf")]

        ;; Cache images for 24 hours
        (let [result (cache/cached
                      (keyword "image" node-id)
                      86400  ;; 24 hours
                      (if is-pdf?
                        #(alfresco/get-pdf-thumbnail ctx node-id)
                        #(alfresco/get-node-content ctx node-id)))]
          (if (:success result)
            {:status 200
             :headers {"Content-Type" (if is-pdf? "image/png" (or mime-type "image/jpeg"))
                       "Cache-Control" "public, max-age=3600"}
             :body (:data result)}
            (do
              (log/error "Failed to fetch image from Alfresco:" (:error result))
              {:status 404
               :body "Image not found"}))))
      (catch Exception e
        (log/error "Error proxying image:" (.getMessage e))
        {:status 500
         :body "Image proxy error"}))))

;; --- BLOG HANDLERS ---

(defn blog-list-handler [request]
  "Display list of all blog posts - Pastor Jim Reflects"
  (let [ctx {}
        result (pathom/query ctx [:blog/list])
        posts (:blog/list result)]

    (log/info "üìö Blog list requested, found" (count posts) "posts")

    (html-response
     (base/base-page
      "Pastor Jim Reflects - Mount Zion UCC"
      (blog/blog-list-page posts)
      ctx))))

(defn blog-detail-handler [request]
  "Display individual blog post by slug"
  (let [slug (get-in request [:path-params :slug])
        ctx {}]

    (log/info "üìÑ Blog post requested:" slug)

    ;; First get the ID from slug
    (let [id-result (pathom/query ctx [{[:blog/slug slug] [:blog/id]}])
          blog-id (get-in id-result [[:blog/slug slug] :blog/id])]

      (if blog-id
        ;; Fetch full post details
        (let [post-result (pathom/query ctx [{[:blog/id blog-id]
                                              [:blog/slug
                                               :blog/title
                                               :blog/content
                                               :blog/description
                                               :blog/published-at
                                               :blog/updated-at
                                               :blog/author
                                               :blog/tags
                                               :blog/thumbnail]}])
              post (get post-result [:blog/id blog-id])]

          (log/info "‚úÖ Blog post found:" (:blog/title post))

          (html-response
           (base/base-page
            (str (:blog/title post) " - Pastor Jim Reflects")
            (blog/blog-detail-page post)
            ctx)))

        ;; Blog post not found
        (do
          (log/warn "‚ö†Ô∏è Blog post not found:" slug)
          {:status 404
           :headers {"Content-Type" "text/html"}
           :body (hiccup/html
                  (base/base-page
                   "Post Not Found"
                   [:div {:class "max-w-4xl mx-auto px-4 py-12 text-center"}
                    [:h1 {:class "text-3xl font-bold text-gray-900 mb-4"}
                     "Blog Post Not Found"]
                    [:p {:class "text-gray-600 mb-6"}
                     "The blog post you're looking for doesn't exist."]
                    [:a {:href "/blog"
                         :class "text-blue-600 hover:text-blue-800 font-medium"}
                     "‚Üê Back to Pastor Jim Reflects"]]
                   ctx))})))))

;; --- SUNDAY WORSHIP HANDLERS ---

(defn sunday-worship-list-handler [request]
  "Display list of Sunday Worship services"
  (let [ctx {}
        result (pathom/query ctx [:worship/list])
        services (:worship/list result)]

    (log/info "üìÖ Sunday Worship list requested, found" (count services) "services")

    (html-response
     (base/base-page
      "Sunday Worship - Mount Zion UCC"
      (worship/sunday-worship-list-page services)
      ctx))))

(defn sunday-worship-detail-handler [request]
  "Display individual Sunday Worship service by date"
  (let [date (get-in request [:path-params :date])
        ctx {}]

    (log/info "üìÑ Sunday Worship service requested:" date)

    (let [service-result (pathom/query ctx [{[:worship/date date]
                                             [:worship/date-formatted
                                              :worship/folder-id
                                              :worship/bulletin
                                              :worship/presentation
                                              :worship/video]}])
          service (get service-result [:worship/date date])]

      (if (:worship/folder-id service)
        (do
          (log/info "‚úÖ Sunday Worship service found:" (:worship/date-formatted service))

          (html-response
           (base/base-page
            (str "Sunday Worship - " (:worship/date-formatted service))
            (worship/sunday-worship-detail-page service)
            ctx)))

        ;; Service not found
        (do
          (log/warn "‚ö†Ô∏è Sunday Worship service not found:" date)
          {:status 404
           :headers {"Content-Type" "text/html"}
           :body (hiccup/html
                  (base/base-page
                   "Service Not Found"
                   [:div {:class "max-w-4xl mx-auto px-4 py-12 text-center"}
                    [:h1 {:class "text-3xl font-bold text-gray-900 mb-4"}
                     "Worship Service Not Found"]
                    [:p {:class "text-gray-600 mb-6"}
                     "The worship service you're looking for doesn't exist."]
                    [:a {:href "/worship/sunday"
                         :class "text-blue-600 hover:text-blue-800 font-medium"}
                     "‚Üê Back to Sunday Worship"]]
                   ctx))})))))

;; --- HERO HANDLERS ---

(defn hero-detail-handler [request]
  "Display individual hero image detail page"
  (let [image-id (get-in request [:path-params :image-id])
        ctx {}]

    (log/info "üéØ Hero detail requested for image:" image-id)

    ;; Fetch image node to get metadata
    (let [node-result (alfresco/get-node ctx image-id)]
      (if (:success node-result)
        (let [node-data (get-in node-result [:data :entry])
              props (:properties node-data)

              ;; Build hero detail data
              hero-data {:hero/id image-id
                        :hero/title (or (:cm:title props) (:name node-data) "Untitled")
                        :hero/description (:cm:description props)
                        :hero/content (:cm:content props)  ; Optional additional content
                        :hero/image {:url (str "/api/image/" image-id)
                                    :alt (or (:cm:title props) (:name node-data))}}]

          (log/info "‚úÖ Hero image found:" (:hero/title hero-data))

          (html-response
           (pages/hero-detail-page hero-data ctx)))

        ;; Image not found
        (do
          (log/warn "‚ö†Ô∏è Hero image not found:" image-id)
          {:status 404
           :headers {"Content-Type" "text/html"}
           :body (hiccup/html (pages/not-found-page image-id))})))))

;; --- FEATURE HANDLERS ---

(defn feature-detail-handler [request]
  "Display individual feature detail page by slug"
  (let [slug (get-in request [:path-params :slug])
        ctx {}]

    (log/info "üéØ Feature detail requested:" slug)

    ;; Dynamically look up node-id from slug
    (let [node-id (htmx/get-feature-node-id-by-slug ctx slug)]

      (if node-id
        ;; Fetch feature content from Alfresco
        (let [result (pathom/query ctx [{[:feature/node-id node-id]
                                         [:feature/title
                                          :feature/content
                                          :feature/description
                                          :feature/image]}])
              feature (get result [:feature/node-id node-id])]

          (log/info "‚úÖ Feature found:" (:feature/title feature))

          (html-response
           (pages/feature-detail-page
            (assoc feature :feature/id slug)
            ctx)))

        ;; Feature not found
        (do
          (log/warn "‚ö†Ô∏è Feature not found:" slug)
          {:status 404
           :headers {"Content-Type" "text/html"}
           :body (hiccup/html (pages/not-found-page slug))})))))

(defn pdf-handler [request]
  "Serve PDF files from Alfresco"
  (let [node-id (get-in request [:path-params :node-id])
        ctx {}]
    (log/info "üìÑ Serving PDF:" node-id)
    (try
      (let [result (cache/cached
                    (keyword "pdf" node-id)
                    86400  ;; Cache 24 hours
                    #(alfresco/get-node-content ctx node-id))]
        (if (:success result)
          {:status 200
           :headers {"Content-Type" "application/pdf"
                     "Cache-Control" "public, max-age=86400"}
           :body (:data result)}
          (do
            (log/error "Failed to fetch PDF:" (:error result))
            {:status 404
             :body "PDF not found"})))
      (catch Exception e
        (log/error "Error serving PDF:" (.getMessage e))
        {:status 500
         :body "PDF error"}))))

(defn media-handler [request]
  "Serve media files (video/audio) from Alfresco by proxying the stream

   Handles HTTP Range requests for video seeking.
   Proxies Range headers to Alfresco and returns partial content."
  (let [node-id (get-in request [:path-params :node-id])
        ctx {}
        config (alfresco/get-config ctx)
        base-url (:base-url config)
        username (:username config)
        password (:password config)
        alfresco-url (str base-url "/alfresco/api/-default-/public/alfresco/versions/1/nodes/"
                         node-id "/content")

        ;; Get Range header from client request
        range-header (get-in request [:headers "range"])]

    (log/info "üé• Streaming media:" node-id (when range-header (str "Range: " range-header)))

    (try
      ;; Get node info for MIME type and size
      (let [node-info (alfresco/get-node ctx node-id)
            mime-type (if (:success node-info)
                       (get-in node-info [:data :entry :content :mimeType])
                       "video/mp4")

            ;; Build headers for Alfresco request (include Range if present)
            alfresco-headers (if range-header
                              {"Range" range-header}
                              {})

            ;; Proxy the request to Alfresco with authentication and Range header
            stream-response (clj-http.client/get alfresco-url
                                                 {:basic-auth [username password]
                                                  :headers alfresco-headers
                                                  :as :stream
                                                  :throw-exceptions false})]

        ;; Return the response with proper status and headers
        (cond
          ;; Partial content (206) - Range request
          (= 206 (:status stream-response))
          {:status 206
           :headers {"Content-Type" mime-type
                     "Accept-Ranges" "bytes"
                     "Content-Range" (get-in stream-response [:headers "Content-Range"])
                     "Content-Length" (get-in stream-response [:headers "Content-Length"])
                     "Cache-Control" "public, max-age=3600"}
           :body (:body stream-response)}

          ;; Full content (200)
          (= 200 (:status stream-response))
          {:status 200
           :headers {"Content-Type" mime-type
                     "Accept-Ranges" "bytes"
                     "Content-Length" (get-in stream-response [:headers "Content-Length"])
                     "Cache-Control" "public, max-age=3600"}
           :body (:body stream-response)}

          ;; Error
          :else
          (do
            (log/error "Failed to stream media from Alfresco:" (:status stream-response))
            {:status (:status stream-response)
             :body "Media not found"})))

      (catch Exception e
        (log/error "Error streaming media:" (.getMessage e))
        {:status 500
         :body "Media streaming error"}))))

;; --- ADMIN HANDLERS ---

(defn style-guide-handler [request]
  "Display the living style guide with all design system components"
  (log/info "üìò Style guide requested")
  (html-response
   (base/base-page
    "Style Guide - Mount Zion CMS"
    (style-guide/style-guide-page)
    {})))

;; --- ROUTES ---

(def all-routes
  "All application routes including API routes"
  (concat
   [["/" {:get home-handler}]

    ["/about" {:get about-handler}]

    ["/contact" {:get contact-handler}]

    ;; Events routes
    ["/events" {:get events-handler}]
    ["/events/calendar" {:get calendar-handler}]

    ["/demo" {:get demo-handler}]

    ["/pages" {:get pages-list-handler}]

    ;; Admin routes
    ["/admin/style-guide" {:get style-guide-handler}]

    ;; Blog routes
    ["/blog" {:get blog-list-handler}]
    ["/blog/:slug" {:get blog-detail-handler}]

    ;; Hero routes
    ["/hero/:image-id" {:get hero-detail-handler}]

    ;; Feature routes
    ["/features/:slug" {:get feature-detail-handler}]

    ;; Sunday Worship routes
    ["/worship/sunday" {:get sunday-worship-list-handler}]
    ["/worship/sunday/:date" {:get sunday-worship-detail-handler}]

    ;; PDF serving
    ["/api/pdf/:node-id" {:get pdf-handler}]

    ;; Media serving (video/audio)
    ["/api/media/:node-id" {:get media-handler}]

    ;; Image proxy - must come before dynamic page handler
    ["/proxy/image/:node-id" {:get image-proxy-handler}]

    ;; Dynamic page handler - catches any page slug
    ["/page/:slug" {:get dynamic-page-handler}]

    ;; Static assets (basic)
    ["/assets/*" {:get (fn [request]
                         {:status 404
                          :body "Static assets not implemented"})}]]

   ;; API routes for HTMX dynamic loading
   api/api-routes
   
   ;; Validation dashboard routes
   dashboard/dashboard-routes))

(comment
  ;; Test routes
  (home-handler {})
  (demo-handler {}))
