(ns mtz-cms.content.static-loader
  "Static content loading from pre-generated EDN files

   These files are generated by sync-content.clj and committed to the repo.
   They provide fast page loads without hitting Alfresco at runtime."
  (:require
   [clojure.java.io :as io]
   [clojure.edn :as edn]
   [clojure.tools.logging :as log]))

;; --- CONFIGURATION ---

(def static-content-dir
  "Directory containing static EDN files"
  "resources/content/static")

;; --- LOADING ---

(defn load-static-page
  "Load a static page from EDN file by slug.

   Args:
     slug - Page slug (e.g., 'about', 'worship')

   Returns:
     Page content map or nil if not found

   Example:
     (load-static-page 'about')
     ;; => {:title 'About Us'
     ;;     :content '<p>...</p>'
     ;;     :node-id 'abc-123'
     ;;     :generated-at '2025-10-01T...'}
  "
  [slug]
  (let [file-path (str static-content-dir "/" slug ".edn")
        resource (io/resource file-path)]

    (if resource
      (try
        (with-open [r (io/reader resource)]
          (let [content (edn/read (java.io.PushbackReader. r))]
            (log/debug "âœ… Loaded static page:" slug)
            content))
        (catch Exception e
          (log/error "Error loading static page:" slug (.getMessage e))
          nil))

      (do
        (log/debug "Static page not found:" slug)
        nil))))

(defn list-static-pages
  "List all available static pages.

   Returns:
     Vector of slug strings

   Example:
     (list-static-pages)
     ;; => ['about' 'worship' 'contact']
  "
  []
  (try
    (when-let [dir (io/resource static-content-dir)]
      (let [files (file-seq (io/file dir))
            edn-files (filter #(and (.isFile %)
                                   (.endsWith (.getName %) ".edn"))
                             files)]
        (mapv #(-> (.getName %)
                  (clojure.string/replace #"\.edn$" ""))
             edn-files)))
    (catch Exception e
      (log/warn "Could not list static pages:" (.getMessage e))
      [])))

(defn static-page-exists?
  "Check if a static page exists for the given slug.

   Args:
     slug - Page slug

   Returns:
     true if static file exists, false otherwise
  "
  [slug]
  (boolean (io/resource (str static-content-dir "/" slug ".edn"))))

(defn page-metadata
  "Get metadata about a static page without loading full content.

   Args:
     slug - Page slug

   Returns:
     Map with :title, :generated-at, etc. or nil
  "
  [slug]
  (when-let [content (load-static-page slug)]
    (select-keys content [:title :node-id :generated-at :slug])))

;; --- REPL HELPERS ---

(comment
  ;; Load a static page
  (load-static-page "about")

  ;; Check if page exists
  (static-page-exists? "about")
  (static-page-exists? "nonexistent")

  ;; List all static pages
  (list-static-pages)

  ;; Get just metadata
  (page-metadata "about")
  )
